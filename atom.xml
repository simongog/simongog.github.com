<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Succinct Data Structures</title>
 <link href="http://simongog.github.com/atom.xml" rel="self"/>
 <link href="http://simongog.github.com"/>
 <updated>2012-08-29T14:21:56+10:00</updated>
 <id>http://simongog.github.com</id>
 <author>
   <name>Simon Gog</name>
   <email>simon.gog@gmail.com</email>
 </author>

 
 <entry>
   <title>New baselines for FM-indexes</title>
   <link href="http://simongog.github.com/lessons/2012/08/28/New-baselines-for-FM-indexes"/>
   <updated>2012-08-28T00:00:00+10:00</updated>
   <id>http://simongog.github.com/lessons/2012/08/28/New-baselines-for-FM-indexes</id>
   <content type="html">&lt;p&gt;The &lt;a href=&quot;http://pizzachili.dcc.uchile.cl&quot; title=&quot;Pizza&amp;amp;Chili&quot;&gt;Pizza&amp;amp;Chili website&lt;/a&gt; provides a 
set of highly tuned compressed index implementation which can be used through the
same interface and a text corpus consisting of texts of different
size origin from several application domains. 
Ferragina et al. 
&lt;a href=&quot;/bibliography/pizzachili08jea.html&quot;&gt;[JEA2008]&lt;/a&gt;
published a good experimental study in which 
the indexes were evaluated. I was excited how the stated
results change if I rerun the experiments of the paper
on my machine and furthermore how good their results
are compared to my own implementations. Therefore, I downloaded the
indexes and test cases, built the programs 
(&lt;a href=&quot;/assets/data/fix_pizza_chili.txt&quot;&gt;instructions to compile the indexes on a 64-bit system&lt;/a&gt;)
and wrote a script which reproduces Table VI
of the JEA paper. The table lists query time and the
space of the data structures for count queries. 
I changed the presentation slightly. The LZ-index was not included but
the &lt;a href=&quot;/bibliography/maknav05cpm.html&quot;&gt;run-length compressed FM-index&lt;/a&gt; 
implemented by M&amp;auml;kinen and Gonz&amp;#225;lez and the succinct suffix array 
which uses the &lt;a href=&quot;/bibliography/rrr02soda.html&quot;&gt;RRR&lt;/a&gt; implementation of 
&lt;a href=&quot;/bibliography/clanav08spire.html&quot;&gt;Claude&lt;/a&gt; were added. &lt;/p&gt;

&lt;p&gt;Before we come to the results, let us briefly revisit the experimental setup: 
The machine was equipped with 8 Intel Xeon E5640 Dual Core Processors which share a 12MB smart cache
and 144GB of DDR3 DRAM, only one core was used for the experiments.
Operating system was Ubuntu Linux 11.10 and we used the gcc compiler version 4.6.1.
Where necessary we added the compile option &lt;code&gt;-m32&lt;/code&gt; and we added the compile option
&lt;code&gt;-msse4.2&lt;/code&gt; when using &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; indexes.
Indexes were build and \(k=50,000\) pattern each of length 
\(m=20\) were extracted from each test file. Subsequently, each index
was queried with the corresponding pattern set and the
total query time was divided by \(k\cdot m\) to get the average
time spend on matching one character of a pattern. &lt;/p&gt;

&lt;p&gt;The tested implementations correspond to the following approaches:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;SSA&lt;/em&gt;: The succinct suffix array is just a Huffman-shaped&lt;a href=&quot;#1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; wavelet tree of the 
     &lt;a href=&quot;/bibliography/burwhe94tr.html&quot;&gt;Burrows-Wheeler transform&lt;/a&gt; (BWT) of the text.
     The space of the structure is about \(nH_0(\TEXT)\) bits. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;SSA_RRR&lt;/em&gt;: The same as SSA but the bitvector is replaced by the RRR implementation
           of Claude, which uses blocks of size \(15\) and a fast decoding method
           of the block counts&lt;a href=&quot;#2&quot;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;. Combining Huffman-shaped wavelet tree with
           compressed bitvectors results in a \(H_k\)-compression. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSA&lt;/em&gt;: Sadakane&amp;#39;s implementation of his 
       &lt;a href=&quot;/bibliography/sad02soda.html&quot;&gt;compressed suffix&lt;/a&gt; array which is 
       based on the \(\Psi\)-function.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;RLFM&lt;/em&gt;: The FM-index based on a run-length encoded wavelet tree 
        &lt;a href=&quot;/bibliography/maknav04tr.html&quot;&gt;[M&amp;auml;kinen and Navarro, 2004]&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AF-index&lt;/em&gt;: The alphabet-friendly FM-index (see &lt;a href=&quot;/bibliography/fmmn07acmtoa.html&quot;&gt;[Fer2007]&lt;/a&gt;)
            partitions the BWT in regions and compresses every region with
            a SSA. The AF-index uses a partitioning such that the overall
            space consumption is minimized.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;plain SA&lt;/em&gt;: The uncompressed suffix array (see &lt;a href=&quot;/bibliography/manmye93.html&quot;&gt;[Manber and Myers 1993]&lt;/a&gt;
            and &lt;a href=&quot;/bibliography/gonbaesni92.html&quot;&gt;[Gonnet et al. 1992]&lt;/a&gt;); binary search is used
            to count patterns. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are the result of the experiments:&lt;/p&gt;

&lt;div class=&quot;myfigure&quot;&gt;
&lt;TABLE CELLPADDING=3 BORDER=&quot;1&quot;&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;SSA&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;SSA_RRR&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;CSA&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;RLFM&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;AF-index&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;plain SA&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;Text&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dblp.xml.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.300&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.83&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.776&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.47&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.648&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.29&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;6.108&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.65&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.840&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.54&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.436&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dna.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.548&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.42&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.812&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.43&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.132&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.46&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.216&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.75&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.768&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.48&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.388&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;english.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.156&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.73&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.676&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.53&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.776&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.44&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.744&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.80&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.048&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.65&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.372&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;proteins.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.024&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.69&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.668&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.69&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.672&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.67&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.704&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.89&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.168&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.82&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.368&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;sources.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.356&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.85&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.960&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.54&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.748&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.38&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.864&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.74&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.156&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.73&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.364&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;span&gt;
Table 1: Time and space taken by the implementations 
on the &lt;a href=&quot;http://pizzachili.dcc.uchile.cl&quot;&gt;Pizza&amp;amp;Chili&lt;/a&gt;.
Time in \(\mu\)secs per pattern symbol and space as fraction
of the original file size.
&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;When you compare this with the table in the paper, you make two
observations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;The runtimes are faster&lt;/em&gt; by almost a factor of 2. This is
due to the use of recent hardware. &lt;/li&gt;
&lt;li&gt;Surprisingly, the &lt;em&gt;space consumption was larger&lt;/em&gt; than in the paper,
despite my configuration to use a very sparse sampling for 
information which is only needed for locating (suffix and inverse
suffix array values). After contacting the authors it turned out, 
that a bitvector is used to indicate which samples are stored.
This bitvector is not removed or compressed, even if there are very few
or no samples. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we are a little bit naughty and just subtract the space needed
for this unnecessary part of the data structure and get the
following table: &lt;/p&gt;

&lt;div class=&quot;myfigure&quot;&gt;
&lt;TABLE CELLPADDING=3 BORDER=&quot;1&quot;&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;SSA&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;SSA_RRR&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;CSA&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;RLFM&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;AF-index&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;plain SA&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;Text&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dblp.xml.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.300&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.69&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.776&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.34&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.648&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.29&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;6.108&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.52&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.840&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.41&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.436&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dna.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.548&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.29&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.812&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.30&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.132&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.46&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.216&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.62&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.768&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.35&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.388&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;english.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.156&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.60&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.676&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.40&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.776&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.44&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.744&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.67&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.048&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.52&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.372&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;proteins.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.024&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.56&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.668&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.55&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.672&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.67&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.704&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.76&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.168&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.69&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.368&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;sources.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.356&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.72&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.960&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.41&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.748&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.38&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.864&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.61&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.156&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.59&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.364&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;5.00&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;span&gt;
Table 2: Table 1 after subtracting the space of parts of 
the data structure, which are not needed for answering
count queries.
&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;Let us now take some configuration of &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; data
structures, which more or less correspond to the selected structures above,
and do exactly the same experiment again.
Here are the results:&lt;/p&gt;

&lt;div class=&quot;myfigure&quot;&gt;
&lt;TABLE CELLPADDING=3 BORDER=&quot;1&quot; id=&quot;sdsl_count_table&quot;&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;&amp;nbsp;&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;FM_HUFF&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;FM_HUFF_RRR15&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;CSA_SADA&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;FM_RLMN&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot; COLSPAN=2&gt;FM_HUFF_RRR63&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;Text&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Time&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;Space&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dblp.xml.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.760&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.70&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.352&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.32&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.676&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.29&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.820&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.34&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.072&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.17&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;dna.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.288&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.29&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.720&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.28&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.460&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.50&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.228&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.79&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.656&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.24&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;english.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.708&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.61&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.480&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.38&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.108&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.44&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.892&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.69&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.640&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.27&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;proteins.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.632&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.56&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.564&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.53&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.360&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.65&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.796&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.89&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;3.288&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.48&lt;/TD&gt;
&lt;/TR&gt;
&lt;TR&gt;&lt;TD ALIGN=&quot;LEFT&quot;&gt;sources.200MB&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.868&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.73&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.684&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.39&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.900&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.37&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;1.964&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.53&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;2.832&lt;/TD&gt;
&lt;TD ALIGN=&quot;CENTER&quot;&gt;0.26&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;span&gt;
Table 3: Time and space taken by some configurations of 
&lt;a href=&quot;http://github.com/simongog/sdsl &quot;&gt;sdsl&lt;/a&gt; 
data structures. Time in \(\mu\)secs per pattern symbol
and space as fraction of the original file size.
&lt;/span&gt;
&lt;/div&gt;

&lt;div id=&quot;figure1&quot; class=&quot;myfigure&quot; style=&quot;display:none;&quot;&gt;
&lt;div style=&quot;width:100%;text-align:right;&quot;&gt;&lt;div id=&quot;close_figure1&quot; title=&quot;Close Figure 1&quot;&gt;X&amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;/div&gt;
&lt;div id=&quot;space_chart&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;
&lt;span&gt; Figure 1: Detailed space consumption of index 
       &lt;span id=&quot;detail_index&quot;&gt;&lt;/span&gt; on text 
       &lt;span id=&quot;detail_test_case&quot;&gt;&lt;/span&gt;. 
       &lt;a href=&quot;/lessons/2012/08/27/Visualizing_SDSL_Data_Structures/&quot;&gt;Here&lt;/a&gt; is more information about the
       visualization of the space breakdown.
&lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;Implementation details: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;FM_HUFF&lt;/em&gt;: Corresponds to this type (don&amp;#39;t be scared by the length of the definition):
           &lt;code&gt;csa_wt&amp;lt;wt_huff&amp;lt;bit_vector,rank_support_v5&amp;lt;&amp;gt;,tNoSel,tNoSel&amp;gt;,64000,64000000&amp;gt;&lt;/code&gt;.
           Explanation: We take a compressed suffix array based on a wavelet tree (&lt;code&gt;csa_wt&lt;/code&gt;).
           The first template parameter specifies the used wavelet tree.
           We take a Huffman-shaped one, i.e. &lt;code&gt;wt_huff&lt;/code&gt;. This wavelet tree uses the
           5% overhead rank structure &lt;code&gt;rank_support_v5&lt;/code&gt; 
           (&lt;a href=&quot;/bibliography/vig08wea.html&quot;&gt;proposed by Vigna&lt;/a&gt;)
           and we use a dummy class for the select functionality&lt;a href=&quot;#3&quot;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;, since we don&amp;#39;t need
           select for counting. We set the sampling rate of suffix array values 
           to \(64000\) and the rate for inverse suffix array values to \(64000000\).
           So we don&amp;#39;t waste space for unnecessary locating information.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FM_HUFF_RRR15&lt;/em&gt;: Corresponds to &lt;code&gt;csa_wt&amp;lt;wt_huff&amp;lt;rrr_vector&amp;lt;15&amp;gt; &amp;gt;,64000,64000000&amp;gt;&lt;/code&gt;.
                 The only thing we have changed is the bitvector implemenation. Now we use
                 the &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; class &lt;code&gt;rrr_vector&lt;/code&gt; parametrized with block size \(15\)&lt;a href=&quot;#4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.
                 We don&amp;#39;t specify the rank and select support structures, since
                 &lt;code&gt;wt_huff&lt;/code&gt; takes the default supporting structures&lt;a href=&quot;#5&quot;&gt;&lt;sup&gt;5&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;CSA_SADA&lt;/em&gt;: We use Elias-\(\delta\) code to compressed the pairwise
            differences of the \(\Psi\)-function and sample every 128th value of the
            \(\Psi\)-function. This translates into this type definition:
           &lt;code&gt;csa_sada&amp;lt;enc_vector&amp;lt;coder::elias_delta,128&amp;gt;,64000,64000000&amp;gt;&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;em&gt;FM_RLMN&lt;/em&gt;: Corresponds to csa_wt&lt;wt_rlmn&lt;&gt;,64000,64000000&amp;gt;. We use the run-length
           compressed wavelet tree &lt;code&gt;csa_wt&lt;/code&gt; which uses the class &lt;code&gt;sd_vector&lt;/code&gt;
           as default compressed bitvector representation.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;FM_HUFF_RRR63&lt;/em&gt;: The only difference to FM_HUFF_RRR15 is 
                 the that now we use a block size of \(63\) for the
                 RRR structure: &lt;code&gt;csa_wt&amp;lt;wt_huff&amp;lt;rrr_vector&amp;lt;63&amp;gt; &amp;gt;,64000,64000000&amp;gt;&lt;/code&gt;. 
                 The decoding of block is now to done with lookup tables
                 but with the on-the-fly decoding approach proposed by the recent SEA
                 paper by &lt;a href=&quot;/bibliography/navpro12sea.html&quot;&gt;Navarro and Providel&lt;/a&gt;&lt;a href=&quot;#6&quot;&gt;&lt;sup&gt;6&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;toc_94&quot;&gt;Observations&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The FM_HUFF implementation can answer count queries in almost half the time than
SSA. This is not surprising, since the &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; implementation uses the 
SSE built function for &lt;a href=&quot;http://en.wikipedia.org/wiki/SSE4#POPCNT_and_LZCNT&quot;&gt;popcount&lt;/a&gt; 
on 64-bit words rather than multiple table-lookups.
The FM_HUFF implementation now even outperforms the 
plain suffix array on the &lt;code&gt;dna.200MB&lt;/code&gt; test case, since only about 4 rank queries 
have to be answered for each symbol of the count query. &lt;/li&gt;
&lt;li&gt;The FM_HUFF_RRR15 implementation uses slightly less space than SSA_RRR, since
we use bit-compression to store integer sequences. The query time is also
slightly faster since we use a more advanced decoding technique&lt;a href=&quot;#4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;CSA_SADA and CSA take about the same amount of memory but the query times
of CSA are slightly faster than the &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; implementation. This is due
to some overhead produced by the coder class &lt;code&gt;coder::elias_delta&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The query times of FM_RLMN is slightly slower than that of RLFM, except 
for the first test case of highly compressible xml data. But in this
case the query time of RLFM is three times slower than that of FM_RLMN 
and at the same time the &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; implementation uses only (65%) 
of the space of RLFM. This is a result of the used sub data structures.
The &lt;a href=&quot;http://pizzachili.dcc.uchile.cl&quot; title=&quot;Pizza&amp;amp;Chili&quot;&gt;Pizza&amp;amp;Chili&lt;/a&gt; implementations uses two uncompressed bitvectors
with a constant time rank and logarithmic time select while
the RM_RLMN uses the &lt;code&gt;sd_vector&lt;/code&gt;, which is a 64-bit implementation
of the &lt;a href=&quot;/bibliography/okasad07alenex.html&quot;&gt;SD-array of Okanohara and Sadakane&lt;/a&gt;.
The space-consumption of &lt;code&gt;sd_vector&lt;/code&gt; is better if there are only
a few runs in the BWT and therefore RM_RLMN outperforms RLFM in the
test cases &lt;code&gt;dblp.xml.200MB&lt;/code&gt; and &lt;code&gt;sources.200MB&lt;/code&gt;. Furthermore
the runtime of rank and select is constant and therefore don&amp;#39;t
get a peak for the dblp file.&lt;/li&gt;
&lt;li&gt;The AF-index which is in theory the most space-efficient index
uses more space than the indexes which use 
&lt;a href=&quot;/bibliography/maknav07spire.html&quot;&gt;implicit compression boosting&lt;/a&gt; 
like SSA_RRR and FM_HUFF_RRR15. So here is space for more engineering.&lt;/li&gt;
&lt;li&gt;The implicit compression boosting index FM_HUFF_RRR63 uses the
least space and its counting time is only slower by a small constant
compared to more space-greedy solutions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;toc_95&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Using the &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; library has several benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can specify an index which outperforms all old
indexes in terms of runtime (e.g. FM_HUFF). Even faster
configurations are possible (e.g. use &lt;code&gt;rank_support_v&lt;/code&gt; or
&lt;code&gt;bit_vector_interleaved&lt;/code&gt; with &lt;code&gt;csa_wt&lt;/code&gt;). &lt;/li&gt;
&lt;li&gt;You can specify an index which outperforms all old indexes
in terms of space (e.g. FM_HUFF_RRR63). Even more 
space-efficient configurations are possible (e.g. 
use &lt;code&gt;rrr_vector&amp;lt;255&amp;gt;&lt;/code&gt;, this reduces the space for 
&lt;code&gt;dblp.xml.200MB&lt;/code&gt; to \(14 \%\) and increases the query time to \(13.8 \mu\)secs ).&lt;/li&gt;
&lt;li&gt;All &lt;a href=&quot;http://github.com/simongog/sdsl&quot; title=&quot;succinct data structure library&quot;&gt;sdsl&lt;/a&gt; indexes are 64-bit implementations and therefore can
be used for texts larger than 512 MiB&lt;a href=&quot;#7&quot;&gt;&lt;sup&gt;7&lt;/sup&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The runtime is predictable, since the select data structures 
is not implemented by a binary search.&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What was not considered in this post are indexes
  which use fixed-block length compression boosting
  proposed by 
  &lt;a href=&quot;/bibliography/karpug11spire.html&quot;&gt;K&amp;auml;rkk&amp;auml;inen and Puglisi at SPIRE 2011&lt;/a&gt;.
  From the data in the paper, the indexes are slightly smaller than
  SSA_RRR while the query times are equal or slightly faster than that
  of SSA.&lt;/p&gt;

&lt;hr&gt;

&lt;div&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;a name=&quot;1&quot; class=&quot;myfootnote&quot;&gt;[1] Using a Huffman-shaped wavelet tree
         was first mention in &lt;a href=&quot;/bibliography/maknav04tr.html&quot;&gt;[M&amp;auml;kinen and Navarro, 2004]&lt;/a&gt; page 17.
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;2&quot; class=&quot;myfootnote&quot;&gt;[2] The trick is, that only 4 bits are required to
               store the count for one block. Claude decodes two blocks at once with
               a lookup table, when possible. This makes the decoding significantly faster
               in practice but is not described in his paper.
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;3&quot; class=&quot;myfootnote&quot;&gt;[3] &lt;code&gt;tNoSel&lt;/code&gt; is a typedef for &lt;code&gt;select_support_dummy&lt;/code&gt;. 
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;4&quot; class=&quot;myfootnote&quot;&gt;[4] Note that for block size \(15\), we do also 
                                            decode two blocks at once like in the implementation
                                            of Claude but whenever possible we decode even more blocks by calculating
                                            the prefix sum of multiple nibbles using the same technique which
                                            is used by &lt;a href=&quot;/bibliography/knu08bit.html&quot;&gt;Knuth&lt;/a&gt; to calculate the
                                            popcount operation.
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;5&quot; class=&quot;myfootnote&quot;&gt;[5] Note: For each bitvector of class &lt;code&gt;X&lt;/code&gt;
                     there exists typedefs &lt;code&gt;X::rank_1_type&lt;/code&gt;, &lt;code&gt;X::rank_0_type&lt;/code&gt;,
                     &lt;code&gt;X::select_1_type&lt;/code&gt;, and &lt;code&gt;X::select_0_type&lt;/code&gt;.
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;6&quot; class=&quot;myfootnote&quot;&gt;[6] Note: You can use a block size up to &lt;code&gt;256&lt;/code&gt;
                                            in the &lt;code&gt;rrr_vector&lt;/code&gt;. Our experiments show
                                            that the runtime for the on-the-fly decompression
                                            is linearly dependent on the block size.
    &lt;/a&gt;&lt;/li&gt;
    &lt;li&gt; &lt;a name=&quot;7&quot; class=&quot;myfootnote&quot;&gt;[7] The limit is not 4 GiB, since we have to address bits.
    &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;   
&lt;/div&gt;

&lt;script type=&quot;text/javascript&quot;&gt;
// Wait for the page to load first
var m = null;
//window.onload = function() {
    sdsl_count_table = d3.select(&quot;#sdsl_count_table&quot;);
    // get index names form column headings
    var index_names = [];
    sdsl_count_table.select(&quot;tr&quot;).selectAll(&quot;td&quot;).filter(function(d,i){return i&gt;0;})
                    .each(function(){ index_names.push( d3.select(this).text() ); })
    // get test case names from first row
    var test_case_names = [];
    sdsl_count_table.selectAll(&quot;tr&quot;)
                    .each(function(d,i){ 
                            if(i&gt;1){
                                test_case_names.push(d3.select(this).select(&quot;td&quot;).text());
                            }
                          }
                    )
    // insert onclick method to space cells
    space_cell = sdsl_count_table
          .selectAll(&quot;tr&quot;).filter(function(d,i){return i&gt;1;})
          .selectAll(&quot;td&quot;).filter(function(d,i){return i&gt;0 &amp;&amp; (i+1)&amp;1;});
//  space_cell.style(&quot;background-color&quot;, &quot;red&quot;);
    space_cell.style(&quot;cursor&quot;,&quot;pointer&quot;);
    space_cell.style(&quot;color&quot;,&quot;#08C&quot;); // see bootsrap.min.css for link color
    var structure_folder=&quot;/assets/data/NewBaselinesForFMIndexes/structure&quot;
    space_cell.on(&quot;click&quot;, function(d,i,j){ 
                    d3.json(structure_folder+&quot;/&quot;+index_names[i]+&quot;_&quot;+test_case_names[j]+&quot;.json&quot;,
                            function(json){      // callback function, for handling of json-data
//                              console.log(json)   
                                var global_id=0;
                                var myinit = initX(&quot;XXX_YYY&quot;)
                                // possible improvement: if json==null, write in the div that
                                // the data was not available
                                myinit(json)
                                d3.select(&quot;#detail_index&quot;).text(index_names[i]); 
                                d3.select(&quot;#detail_test_case&quot;).text(test_case_names[j]); 
                                d3.select(&quot;#figure1&quot;).style(&quot;display&quot;,&quot;block&quot;)
                                  .transition().duration(500).style(&quot;opacity&quot;,1);
                            }); 
                   }
            );

    close_figure1 = d3.select(&quot;#close_figure1&quot;);
    close_figure1.style(&quot;cursor&quot;,&quot;pointer&quot;).style(&quot;color&quot;,&quot;#08C&quot;);
    var hide_figure1 = function(){
        d3.select(&quot;#figure1&quot;).transition().duration(300).style(&quot;display&quot;,&quot;none&quot;).style(&quot;opacity&quot;,0);
    }
    close_figure1.on(&quot;click&quot;, hide_figure1 )
    
//}
&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>Visualizing data structures in sdsl</title>
   <link href="http://simongog.github.com/lessons/2012/08/27/Visualizing_SDSL_Data_Structures"/>
   <updated>2012-08-27T00:00:00+10:00</updated>
   <id>http://simongog.github.com/lessons/2012/08/27/Visualizing_SDSL_Data_Structures</id>
   <content type="html">&lt;p&gt;In this post, I want to present a new feature of the &lt;a href=&quot;http://github.com/simongog/sdsl&quot;&gt;succinct 
data structure library&lt;/a&gt;,
which I really like. The problem was the following. When you
read a theory paper on succinct data structures you can
get easily lost in all those space complexity terms.
Often it is hard to imagine how big e.g. \(\log\frac{1}{H_k}\)
would be or which constant is hidden in a 
\(\Order{\cdot}\)-term. It is even worse, if the data structure is composed of
many other succinct substructures.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://github.com/simongog/sdsl&quot;&gt;sdsl&lt;/a&gt; you can easily determine for each
object how many space is consumed. Say you have an object &lt;code&gt;X&lt;/code&gt; then the methods
&lt;code&gt;util::get_size_in_bytes&lt;/code&gt; or &lt;code&gt;util::get_size_in_mega_bytes&lt;/code&gt; will answer
you the question. However, you do not know the breakdown to the different
components of the data structure. We have addressed that problem and 
now it is possible to call&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;write_structure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSON_FORMAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to get a hierarchical decomposition of the space usage of a object.
The type of the output can be specified by the template parameter.
Right now we support output in the &lt;a href=&quot;http://www.json.org/&quot;&gt;JSON format&lt;/a&gt;
(&lt;code&gt;JSON_FORMAT&lt;/code&gt;)
and as &lt;a href=&quot;http://www.r-project.org/&quot;&gt;R&lt;/a&gt; lists (&lt;code&gt;R_FORMAT&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;Here is an example of the output of an object of a compressed
suffix array which is based on a 
&lt;a href=&quot;/bibliography/maknav05cpm.html&quot;&gt;run-length encoded wavelet tree&lt;/a&gt; 
which uses 
&lt;a href=&quot;/bibliography/okasad07alenex.html&quot;&gt;SD arrays&lt;/a&gt;. 
The output contains the information we
want to know, however it is hard to read. Therefore lets press
to button &lt;code&gt;Show serialize&lt;/code&gt; and the JSON output will be transformed
in a nice &lt;a href=&quot;http://www.w3.org/Graphics/SVG/&quot;&gt;SVG&lt;/a&gt; graphic which shows
the information in a more accessible way.  &lt;/p&gt;

&lt;p&gt;&lt;textarea id=&quot;sdsl_json_input&quot; cols=&quot;50&quot; rows=&quot;10&quot; style=&quot;width:100%&quot;&gt;
{&amp;quot;class_name&amp;quot;:&amp;quot;csa_wt&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;166327272&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;wt_rlmn&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;wavelet_tree&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;166313164&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned long&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;size&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bl&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;56699449&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned long&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;size&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned char&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;wl&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;1&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;low&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;16107937&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;32885152&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high_1_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3696846&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;110129&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3944&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;14345&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3568420&amp;quot;}]},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high_0_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4009505&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;114697&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4104&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3890696&amp;quot;}]}]},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bf&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;56698169&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned long&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;size&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned char&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;wl&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;1&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;low&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;16107937&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;32885152&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high_1_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3702582&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;110129&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3944&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;14345&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3574156&amp;quot;}]},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;high_0_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4002489&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;114697&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4104&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3883680&amp;quot;}]}]},{&amp;quot;class_name&amp;quot;:&amp;quot;wt_huff&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;wt&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;52911426&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned long&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;size&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned long&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;sigma&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;tree&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;35600832&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;rank_support_v&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;tree_rank&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8900216&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;cumulative_counts&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;8900216&amp;quot;}]},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;tree_select_1&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4824685&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;146857&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;5072&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;14857&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;4657891&amp;quot;}]},{&amp;quot;class_name&amp;quot;:&amp;quot;select_support_mcl&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;tree_select_0&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3571875&amp;quot;,&amp;quot;children&amp;quot;:[{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;superblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;105233&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;bit_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;mini_or_long&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3640&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;longsuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;44059&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;minisuperblock&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;3418935&amp;quot;}]}]},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_rank_support&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bl_rank&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_rank_support&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bf_rank&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_select_support&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bl_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;sd_select_support&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;bf_select&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;0&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;C&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;2056&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;C_bf_rank&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;2056&amp;quot;}]},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;sa_samples&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;11481&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;isa_samples&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;33&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;char2comp&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;264&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;comp2char&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;264&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;int_vector&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;C&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;2064&amp;quot;},{&amp;quot;class_name&amp;quot;:&amp;quot;unsigned short&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;sigma&amp;quot;,&amp;quot;size&amp;quot;:&amp;quot;2&amp;quot;}]}
&lt;/textarea&gt;
&lt;input type=&quot;button&quot; value=&quot;Show visualization&quot; onclick=&quot;my2Json()&quot;&gt;&lt;/input&gt;
&lt;div id=&quot;space_chart&quot; style=&quot;text-align: center;&quot;&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The visualization was realized with Mike Bostock&amp;#39;s superb &lt;a href=&quot;http://d3js.org&quot;&gt;D3.js&lt;/a&gt;
JavaScript library (D3 = Data-Driven Documents).
The graphic is a mirrored 
&lt;a href=&quot;http://mbostock.github.com/protovis/ex/icicle.html&quot;&gt;icicle-graph&lt;/a&gt;.
You can read the example the following way: The object of class
&lt;code&gt;csa_wt&lt;/code&gt; has size 158.62 MiB. It has one member named 
&lt;code&gt;wavelet_tree&lt;/code&gt; of type &lt;code&gt;wt_rlmn&lt;/code&gt; and this member takes almost 
all space; namely 158.61 MiB (click on the entry to get this information).
The &lt;code&gt;wavelet_tree&lt;/code&gt; member itself is composed of three members
called &lt;code&gt;bl&lt;/code&gt;,&lt;code&gt;bf&lt;/code&gt;, and &lt;code&gt;wt&lt;/code&gt;. Now you can inspect each of these members
by clicking on it. Lets choose &lt;code&gt;bf&lt;/code&gt;. The figure will show at
the upper part the size and fraction of the selected
member. In this example &lt;code&gt;bf&lt;/code&gt; takes 54.07 MiB which corresponds to
34.09% of the whole space. Experts will know that the
sdsl class &lt;code&gt;sd_vector&lt;/code&gt; (64bit implementation of the
&lt;a href=&quot;/bibliography/okasad07alenex.html&quot;&gt;SD array&lt;/a&gt; can be further
decomposed into the low and high bit part of the positions
of the set one bits and select data structure for the &lt;code&gt;high&lt;/code&gt;
&lt;code&gt;bit_vector&lt;/code&gt;. Explore it if you like ;)
To go up the hierarchy again simply click on a element in
a higher level and the figure will zoom out again.&lt;/p&gt;

&lt;p&gt;And at last the best thing of this blog entry. You can use
the form above to paste in your own output and visualize the it!&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot;&gt;

var global_id=0
myJson = function(url, callback){
    d3.json(url, callback);
};

my2Json = function(){
//  console.log(&quot;Hallo&quot;)
//  console.log( document.getElementById('sdsl_json_input').value)  
    var myinit = initX(&quot;XXX_YYY&quot;);
    var json_text = document.getElementById('sdsl_json_input').value;
    myinit(json_text ? JSON.parse(json_text) : null);
    return true;
}
&lt;/script&gt;
</content>
 </entry>
 
 <entry>
   <title>Calculating the k-th order empirical entropy in linear time</title>
   <link href="http://simongog.github.com/lessons/2012/08/26/Calculating_H_k_in_linear_time"/>
   <updated>2012-08-26T00:00:00+10:00</updated>
   <id>http://simongog.github.com/lessons/2012/08/26/Calculating_H_k_in_linear_time</id>
   <content type="html">&lt;p&gt;In this post, I will explain how it is possible to efficiently
calculate different measures of text compressibility -- the zeroth
and \(k\)-th order empirical entropy -- using
&lt;a href=&quot;http://github.com/simongog/sdsl&quot;&gt;sdsl&lt;/a&gt;. For both cases
we use a compressed suffix tree (CST) to do the calculation.
So step one is to build a compressed suffix tree of a
text file. This can be easily done with the following
code snippet:
&lt;script src=&quot;http://gist.github.com/3355523.js&quot;&gt;&lt;/script&gt;
You can copy this program into the examples directory and
execute &lt;code&gt;make&lt;/code&gt; to get an executable, which will
construct a CST for the file given by the first argument
to the program. Lets take for example the file 
&lt;code&gt;faust.txt&lt;/code&gt; which is located in the libraries
test suite. A run of the program produces a CST 
names &lt;code&gt;faust.txt.cst3&lt;/code&gt;. The CST has size 
460 kB for the original 222 kB. &lt;/p&gt;

&lt;h2 id=&quot;toc_89&quot;&gt;1 Calculating the zeroth order entropy&lt;/h2&gt;

&lt;p&gt;The zeroth order empirical entropy \(H_0\) 
of a text \(\TEXT\) of length \(n\) 
over an alphabet \(\Sigma=\{c_0,\ldots,c_{\sigma-1}\}\) of size \(\sigma \) is a lower 
bound for a compressor which encodes each symbol independently of
any of its preceding or following symbols.&lt;/p&gt;

&lt;div&gt;
\[
H_0(\TEXT) = \sum\limits_{i=0}^{\sigma-1} \frac{n_i}{n} \log{\frac{n}{n_i}}
\]
&lt;/div&gt;

&lt;p&gt;where \(n_i\) is the number of occurrences of character 
\(c_i\) in \(\TEXT\). It is very easy to see that 
\(n_i\) corresponds to the size of subtree (e.g. number of
leaves in the subtree) rooted at the
\(i\)-th child of the root of the CST. The length of the
text \(n\) corresponds to the size of the whole tree.
Therefore, the following method calculates \(H_0(\TEXT)\) 
if &lt;code&gt;v&lt;/code&gt; is the root node of our CST: &lt;/p&gt;

&lt;script src=&quot;http://gist.github.com/3355768.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The code is straightforward: If the root node is a leaf, then
the tree and the text are empty and \(H_0\) should be 0.
Otherwise we recover \(n\) by determine the size of the
subtree of &lt;code&gt;v&lt;/code&gt; and calculate the first child. We then add for
each child its weighted contribution to \(H_0\). Note:
&lt;code&gt;cst.sibiling(w)&lt;/code&gt; returns the root node &lt;code&gt;cst.root()&lt;/code&gt; if there
is no next sibling.&lt;/p&gt;

&lt;h2 id=&quot;toc_90&quot;&gt;2 Calculating the k-th order entropy&lt;/h2&gt;

&lt;div&gt;More advanced compressors make use of the context before 
a symbol and choose different codes dependent on the preceding
context. Say, the length of the context is of fixed length \(k\),
then the \(k\)-th order empirical entropy \(H_k(\TEXT)\) is a lower
bound for compressors which encode each symbol with a
codeword that depends on the preceding \(k\) symbols.
Here is the formal definition:
   
\[
    H_k(\TEXT) = \frac{1}{n} \sum_{\omega\in \Sigma^k} |T_\omega|H_0(T_\omega)
\]

where \(T_\omega\) is the concatenation of all characters in \(\TEXT\)
which follow the occurrences of the substring \(\omega\) in \(\TEXT\).
Note that a brute-force calculation of \(H_k\) is expensive, since
there are many substrings \(\omega\) which do not
contribute to the result, since they do not occur in \(\TEXT\) and
therefore \(T_\omega\) is empty. Fortunately with a CST we can exactly
inspect those substrings which occur in the text and can also easily
calculate \(|T_\omega|\) and \(H_0(T_\omega)\). A substring of length
\(k\) is represented as a sequence of edges of length \(k\) in the CST.
If the substring is always followed by the same symbol \(c\) then there exists
no corresponding node for the substring in the CST. But in this case
\(H_0(T_\omega)=0\), since \(T_\omega\) consists only of \(c\)s. On the
oder hand if different occurrences of \(\omega\) are followed by different characters
then there exists a CST node \(v\) with depth \(k\). In this case  
\(|T_\omega|\) corresponds to the size of the subtree of \(v\) and
\(H_0(T_\omega)\) can be calculated by the algorithm from Section 1.
Here is the complete code:
&lt;/div&gt;

&lt;script src=&quot;http://gist.github.com/3473167.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;toc_91&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;Lets look at an example. Say our string is \(\TEXT\)=&lt;code&gt;umulmundumulmu$&lt;/code&gt; 
and we and to calculate \(H_1(\TEXT)\).
Then the occurrences of substrings &lt;code&gt;d&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; are always followed
by the same character and so they do not contribute to the result.
Have a look at the figure below to also note that all these substrings
are not represented by a node in the CST. &lt;code&gt;$&lt;/code&gt; is represented by
a node but does also not contribute since it is a leaf node and
therefore \(T_{\$}\) empty. We can also determine from the figure
that the substring &lt;code&gt;m&lt;/code&gt; is followed by one &lt;code&gt;$&lt;/code&gt; and four &lt;code&gt;u&lt;/code&gt; and 
therefore adds \(5H_0(T_m)\) to the result. Note that the
actual order of characters in \(T_m\) does not change
the result and it is enough to know the distribution of 
symbols. In our case \([1,4]\). Finally, we do the
same procedure also for substring &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt;

&lt;div style=&quot;text-align:center;width:100%;&quot;&gt;
&lt;img alt=&quot;k-th order entropy calculation with a suffix tree&quot; 
     src=&quot;/assets/images/kth_order_entropy_calculation_suffix_tree.png&quot;&gt;&lt;/image&gt;
&lt;/div&gt;

&lt;h1 id=&quot;toc_92&quot;&gt;Experiment&lt;/h1&gt;

&lt;p&gt;Lets take the 200 MiB test cases of the 
&lt;a href=&quot;http://pizzachili.di.unipi.it/&quot;&gt;Pizza&amp;amp;Chili&lt;/a&gt;
corpus build the CST with the program above and calculate
\(H_0,\ldots,H_{10} \) with this program:
&lt;script src=&quot;http://gist.github.com/3476809.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;Voil&amp;#225;, here is the result:&lt;/span&gt;&lt;/p&gt;

&lt;div style=&quot;text-align:center;width:100%;&quot;&gt;
&lt;img alt=&quot;k-th order entropy calculation with a suffix tree&quot; 
     src=&quot;/assets/images/kth_order_entropy_results_pizza_chili_200MB.png&quot;&gt;&lt;/image&gt;
&lt;/div&gt;

&lt;p&gt;In one of the next posts, I will show that we can reach about \(H_4\) 
in practice. If we choose larger values for \(k\) then the 
number of contexts \(CT\) is so high, that the information
which is needed to store context information dominates the space.&lt;/p&gt;

&lt;h2 id=&quot;toc_93&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/bibliography/manzini99soda.html&quot;&gt;Manzini&amp;#39;s SODA article&lt;/a&gt; and &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/bibliography/navmak07.html&quot;&gt;the full-text index overview article of Navarro and M&amp;auml;kinen&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The figure and algorithms were also used as an example in my &lt;a href=&quot;/bibliography/gog2011phd.html&quot;&gt;thesis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>